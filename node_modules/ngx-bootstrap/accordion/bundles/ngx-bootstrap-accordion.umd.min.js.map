{"version":3,"sources":["../../../../src/accordion/accordion.config.ts","../../../../src/accordion/accordion.component.ts","../../../../src/accordion/accordion-group.component.html","../../../../src/accordion/accordion-group.component.ts","../../../../src/accordion/accordion.module.ts"],"names":["this","closeOthers","isAnimated","AccordionConfig","factory","providedIn","Injectable","AccordionComponent","config","groups","Object","assign","prototype","closeOtherPanels","openGroup","forEach","group","isOpen","addGroup","push","removeGroup","index","indexOf","splice","i0","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","i0.ɵɵprojection","Component","selector","template","host","role","class","style","Input","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","AccordionPanelComponent","accordion","panelClass","isDisabled","isOpenChange","EventEmitter","_isOpen","defineProperty","value","_this","Promise","resolve","then","emit","isBs3","ngOnInit","ngOnDestroy","toggleOpen","i0.ɵɵlistener","i0.ɵɵtemplate","i0.ɵɵattribute","templateUrl","styleUrls","Inject","heading","Output","HostBinding","AccordionModule","forRoot","ngModule","providers","imports","CommonModule","CollapseModule","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers = false;\n  /** turn on/off animation */\n  isAnimated = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers = false;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","<div class=\"panel card\" [ngClass]=\"panelClass\">\n  <div\n    class=\"panel-heading card-header\"\n    role=\"tab\"\n    (click)=\"toggleOpen()\"\n    [ngClass]=\"isDisabled ? 'panel-disabled' : 'panel-enabled'\"\n  >\n    <div class=\"panel-title\">\n      <div role=\"button\" class=\"accordion-toggle\" [attr.aria-expanded]=\"isOpen\">\n        <button class=\"btn btn-link\" *ngIf=\"heading\" [ngClass]=\"{ 'text-muted': isDisabled }\" type=\"button\">\n          {{ heading }}\n        </button>\n        <ng-content select=\"[accordion-heading]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel-collapse collapse\" role=\"tabpanel\" [collapse]=\"!isOpen\" [isAnimated]=\"isAnimated\">\n    <div class=\"panel-body card-block card-body\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading!: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass = 'panel-default';\n  /** if <code>true</code> — disables accordion group */\n  @Input() isDisabled = false;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null)\n      .then(() => {\n        this.isOpenChange.emit(value);\n      });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders<AccordionModule> {\n    return { ngModule: AccordionModule, providers: [] };\n  }\n}\n"]}